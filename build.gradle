plugins {
    id "nebula.os-package" version "2.2.0"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'os-package'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.oneandone'
archivesBaseName = 'snmpman'
version = '1.2-SNAPSHOT'

mainClassName = 'com.oneandone.snmpman.Snmpman'

repositories {
    mavenCentral()

    maven {
        url "https://oosnmp.net/dist/release/"
    }
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'args4j', name: 'args4j', version: '2.0.29'

    compile group: 'org.snmp4j', name: 'snmp4j', version: '2.3.3'
    compile group: 'org.snmp4j', name: 'snmp4j-agent', version: '2.3.1'
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.5.1'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.5.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.5.1'
    provided group: 'org.projectlombok', name: 'lombok', version: '1.16.2'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.10'

    testCompile group: 'org.testng', name: 'testng', version: '6.8.21'
}
test.useTestNG()

task fatJar(type: Jar) {
    dependsOn configurations.runtime
    from ((configurations.runtime - configurations.provided).collect { it.isDirectory() ? it : zipTree(it) })  {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        attributes 'Implementation-Title': 'snmpman',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Main-Class': mainClassName
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

gradle.taskGraph.whenReady {taskGraph ->
    if ("${version}".matches("[0-9]+\\.[0-9]+\\-SNAPSHOT") && (taskGraph.hasTask(buildRpm) || taskGraph.hasTask(buildDeb) || taskGraph.hasTask(release))) {
        def gitRevision = 'git rev-list HEAD --count'.execute().text.trim()
        version = "${version}".replace('-SNAPSHOT', '') + ".${gitRevision}"

        configurations.testCompile.dependencies.each { dependency ->
            if (dependency.version.contains("SNAPSHOT")) {
                throw new RuntimeException("project contains SNAPSHOT dependency in artifact ${dependency.group}:${dependency.name}:${dependency.version}")
            }
        }
    }
}

// --------------------------------------------------------------------------------------------------------------------
// The packaging configuration (RPM/DEB)
// --------------------------------------------------------------------------------------------------------------------
ospackage {
    packageName = 'snmpman'
    release = 1
    arch = NOARCH
    os = LINUX // only applied to RPM
    packageDescription = 'SNMPMAN'
    distribution = 'development'
    
    prefix '/opt/snmpman' // also only applied to RPM
    into '/opt/snmpman'

    from(fatJar.outputs.files) {
        into 'lib'
        fileMode = 0644
        createDirectoryEntry = true
    }
    
    from('src/main/scripts') {
        into 'bin'
        include '*.sh'
        fileMode = 0755
        createDirectoryEntry = true
    }
    
    from('src/main/config') {
        fileType CONFIG | NOREPLACE
        into 'etc'
        fileMode = 0644
        createDirectoryEntry = true
    }
}

buildRpm {
    user 'snmpman'
    permissionGroup 'snmpman'
    
    preInstall file('src/main/scripts/install/rpm-preInstall.sh')
    postUninstall file('src/main/scripts/install/rpm-postUninstall.sh')
}

buildDeb {
    // TODO add install script and move user and group up to main defintion once bug is fixed
    //preInstall file('src/main/scripts/install/deb-preInstall.sh')
    //postUninstall file('src/main/scripts/install/deb-postUninstall.sh')
}

// --------------------------------------------------------------------------------------------------------------------
// Release tasks to 'The Central Repository'
// --------------------------------------------------------------------------------------------------------------------

// credentials to 'The Central Repository' (http://central.sonatype.org/pages/ossrh-guide.html)
if (hasProperty('ossrhUsername') && hasProperty('ossrhPassword')) {
    task release(dependsOn: uploadArchives) << {
        println "build release with version ${version}"
    }

    task snapshot(dependsOn: uploadArchives) << {
        println "build snapshot with version ${version}"
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'snmpman'
                    packaging 'jar'
                    description 'The SNMPMAN is an application or library that can simulate SNMP capable devices'
                    url 'http://1and1.github.io/snmpman/'

                    scm {
                        url 'https://github.com/1and1/snmpman.git'
                        connection 'https://github.com/1and1/snmpman.git'
                        developerConnection 'https://github.com/1and1/snmpman.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    repositories {
                        repository {
                            id 'snmp4j.repo'
                            name 'SNMP4J Maven Repository'
                            url 'https://oosnmp.net/dist/release'
                        }
                    }

                    organization {
                        name '1&1 Internet Inc.'
                        url 'http://www.1and1.com/'
                    }

                    developers {
                        developer {
                            id 'bitionaire'
                            name 'Johann Boehler'
                        }
                        developer {
                            id 'netdevfighter'
                            name 'Tobias Lindenmann'
                        }
                    }
                }
            }
        }
    }
}