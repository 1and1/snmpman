plugins {
    id "nebula.os-package" version "2.2.0"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'os-package'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.oneandone.network'
archivesBaseName = 'snmpman'
version = '1.1-SNAPSHOT'

mainClassName = 'com.oneandone.network.snmpman.Snmpman'

repositories {
    mavenCentral()

    maven {
        url "https://oosnmp.net/dist/release/"
    }
}
test.useTestNG()

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'args4j', name: 'args4j', version: '2.0.29'
    compile group: 'org.snmp4j', name: 'snmp4j', version: '2.3.3'
    compile group: 'org.snmp4j', name: 'snmp4j-agent', version: '2.2.2' // TODO 2.3.1
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.5.1'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.5.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.5.1'
    provided group: 'org.projectlombok', name: 'lombok', version: '1.16.2'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.10'

    testCompile group: 'org.testng', name: 'testng', version: '6.8.21'
}

jar {
    dependsOn configurations.runtime
    from ((configurations.runtime - configurations.provided).collect { it.isDirectory() ? it : zipTree(it) })  {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        attributes 'Implementation-Title': 'snmpman',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Main-Class': mainClassName
    }
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(buildRpm) || taskGraph.hasTask(buildDeb)) {
        def gitRevision = 'git rev-list HEAD --count'.execute().text.trim()
        version = "${version}".replace('-SNAPSHOT', '') + ".${gitRevision}"
        
        configurations.testCompile.dependencies.each { dependency ->
            if (dependency.version.contains("SNAPSHOT")) {
                throw new RuntimeException("project contains SNAPSHOT dependency in artifact ${dependency.group}:${dependency.name}:${dependency.version}")
            }
        }
    }
}

ospackage {
    packageName = 'snmpman'
    release = 1
    arch = NOARCH
    os = LINUX // only applied to RPM
    packageDescription = 'SNMPMAN'
    distribution = 'development'
    
    prefix '/opt/snmpman' // also only applied to RPM
    into '/opt/snmpman'
    
    user 'snmpman'
    
    from(jar.outputs.files) {
        into 'lib'
        fileMode = 0644
        createDirectoryEntry = true
    }
    
    from('src/main/scripts') {
        into 'bin'
        include '*.sh'
        fileMode = 0755
        createDirectoryEntry = true
    }
    
    from('src/main/config') {
        fileType CONFIG | NOREPLACE
        into 'etc'
        fileMode = 0644
        createDirectoryEntry = true
    }
}

buildRpm {
    permissionGroup 'snmpman'
    
    preInstall file('src/main/scripts/install/rpm-preInstall.sh')
    postUninstall file('src/main/scripts/install/rpm-postUninstall.sh')
}

buildDeb {
    preInstall file('src/main/scripts/install/deb-preInstall.sh')
    postUninstall file('src/main/scripts/install/deb-postUninstall.sh')
}